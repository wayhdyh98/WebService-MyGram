basePath: /
definitions:
  models.Comment:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/models.Photo'
      photo_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.Photo:
    properties:
      caption:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.Socialmedia:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: integer
      comment:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      photo:
        items:
          $ref: '#/definitions/models.Photo'
        type: array
      socialmedia:
        items:
          $ref: '#/definitions/models.Socialmedia'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
host: webservice-mygram-production.up.railway.app
info:
  contact:
    email: soberkoder@swagger.io
    name: API Support
  description: This is a simple service for managing MyGram
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MyGram API
  version: "4.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get all comments from given user Id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Get all comments
      tags:
      - comment
    post:
      consumes:
      - application/json
      description: Create new comment corresponding to the input data
      parameters:
      - description: create comment
        in: body
        name: models.Comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Create comment from given data
      tags:
      - comment
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Delete the comment corresponding to the input Comment id
      parameters:
      - description: ID of the comment to be deleted
        in: path
        name: commentId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete comment identified by the given Comment id
      tags:
      - comment
    get:
      consumes:
      - application/json
      description: Get comment corresponding to the input Comment id
      parameters:
      - description: ID of the comment
        in: path
        name: commentId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Get comment for a given Comment id
      tags:
      - comment
    patch:
      consumes:
      - application/json
      description: Update the comment corresponding to the input Comment id
      parameters:
      - description: ID of the comment to be updated
        in: path
        name: commentId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Update comment identified by the given Comment id
      tags:
      - comment
  /medias:
    get:
      consumes:
      - application/json
      description: Get all medias from given user Id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Socialmedia'
      security:
      - Bearer: []
      summary: Get all medias
      tags:
      - media
    post:
      consumes:
      - application/json
      description: Create new media corresponding to the input data
      parameters:
      - description: create media
        in: body
        name: models.Socialmedia
        required: true
        schema:
          $ref: '#/definitions/models.Socialmedia'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Socialmedia'
      security:
      - Bearer: []
      summary: Create media from given data
      tags:
      - media
  /medias/{mediaId}:
    delete:
      consumes:
      - application/json
      description: Delete the media corresponding to the input Media id
      parameters:
      - description: ID of the media to be deleted
        in: path
        name: mediaId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete media identified by the given Media id
      tags:
      - media
    get:
      consumes:
      - application/json
      description: Get media corresponding to the input Media id
      parameters:
      - description: ID of the media
        in: path
        name: mediaId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Socialmedia'
      security:
      - Bearer: []
      summary: Get media for a given Media id
      tags:
      - media
    patch:
      consumes:
      - application/json
      description: Update the media corresponding to the input Media id
      parameters:
      - description: ID of the media to be updated
        in: path
        name: mediaId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Socialmedia'
      security:
      - Bearer: []
      summary: Update media identified by the given Media id
      tags:
      - media
  /photos:
    get:
      consumes:
      - application/json
      description: Get all photos from given user Id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Get all photos
      tags:
      - photo
    post:
      consumes:
      - application/json
      description: Create new photo corresponding to the input data
      parameters:
      - description: create photo
        in: body
        name: models.Photo
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Create photo from given data
      tags:
      - photo
  /photos/{photoId}:
    delete:
      consumes:
      - application/json
      description: Delete the photo corresponding to the input Photo id
      parameters:
      - description: ID of the photo to be deleted
        in: path
        name: photoId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete photo identified by the given Photo id
      tags:
      - photo
    get:
      consumes:
      - application/json
      description: Get photo corresponding to the input Photo id
      parameters:
      - description: ID of the photo
        in: path
        name: photoId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Get photo for a given Photo id
      tags:
      - photo
    patch:
      consumes:
      - application/json
      description: Update the photo corresponding to the input Photo id
      parameters:
      - description: ID of the photo to be updated
        in: path
        name: photoId
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
      security:
      - Bearer: []
      summary: Update photo identified by the given Photo id
      tags:
      - photo
  /users/login:
    post:
      consumes:
      - application/json
      description: Get user profile corresponding to the input Id
      parameters:
      - description: login user
        in: body
        name: models.User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get users for a given Id
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create new user corresponding to the input data
      parameters:
      - description: create user
        in: body
        name: models.User
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create users from given data
      tags:
      - users
swagger: "2.0"
